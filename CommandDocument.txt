Summary:
Includes
  lvgl/lvgl: ^9.2.2
  espressif/esp_lcd_touch_gt911: ^1.1.3

Project Overview

This firmware is for a Digital Read Out (DRO) system, typically used in machine tools like lathes or mills. It runs on an ESP32 and provides a touchscreen UI to display and manage the position of two axes (X and Z), using quadrature encoder scales for position feedback and supporting multiple tool offsets, unit selection (mm/inch), and diameter/radius display modes.
Key Components & Structure

    main.cpp

        Entry point. Initializes hardware, LVGL graphics/UI, loads tool data, sets up axis interrupts, and runs the main loop to keep the UI updated.

    config.h

        Central hardware and feature configuration: pin assignments, scale resolution, display size, max tools, NVS (storage) parameters, and feature toggles.

    dro_axis.cpp

        Encapsulates logic for each linear axis. Handles GPIO setup, encoder signal decoding via interrupts, position tracking in microns, and zeroing.

    tool_manager.cpp

        Manages a list of tools with name and individual X/Z offsets. Provides add, remove, rename, and persistent save/load (via NVS) functions.

    preferences_wrapper.cpp

        Wraps ESP32 NVS (non-volatile storage) for easy read/write of strings, floats, and integers with schema version control.

    app_display.cpp

        Initializes the TFT display and capacitive touch panel. Sets up LVGL drawing buffers, backlight, RGB panel, and touch drivers.

    hardware_abstraction.cpp

        Provides a generic interface for attaching/detaching GPIO interrupts, and fetching system time in ms/us.

    interrupts.cpp

        Sets up and manages ISR services for the axes using the hardware abstraction layer.

    ui_widgets.cpp

        Contains helper functions to create common UI widgets (labels, buttons, dropdowns, panels) with LVGL.

    ui_manager.cpp

        Implements the main UI logic and event handling:

            Displays current axis positions, tool names, offsets.

            Allows zeroing, unit toggle, diameter/radius toggle, tool selection/editing/adding/removal.

            Handles popups for numeric input (for manual DRO value setting).

            Manages display sleep/wake behavior.

            Updates UI elements on every loop iteration.

How It All Works (Flow)

    Startup:

        Hardware and display/touch are initialized.

        Axis objects and tool manager are created and loaded from NVS.

        Interrupts are attached to the scale channels.

        LVGL UI is set up and periodically ticked for rendering.

    Runtime:

        Quadrature encoders trigger interrupts, updating X/Z positions.

        UI loop updates displayed values (considering tool offsets, unit, diameter/radius mode).

        Users interact via touchscreen to change tools, zero axes, switch units/modes, and input manual values.

        Changes in tool or user preferences are persisted to NVS.

Features

    Dual-axis (X/Z) position readout with microns resolution

    Persistent tool offsets, supporting multiple tools

    Easy touch UI for tool management, zeroing, and settings

    Switch between mm/inch and diameter/radius display

    Manual input of DRO readouts via popup keyboard

    Sleep mode for the display, wakes on touch

In summary:
This codebase provides a modular, robust, and user-friendly ESP32 DRO solution, with persistent tool offset management, flexible display/UI options, and real-time position updatesâ€”all managed through a modern touchscreen interface.